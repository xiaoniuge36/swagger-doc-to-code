"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerListCommands = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const vscode_1 = __importDefault(require("vscode"));
const tools_1 = require("../tools");
const core_1 = require("../core");
/** ÂàõÂª∫Ê®°ÊùøÊñá‰ª∂ÔºàÂ¶ÇÊûú‰∏çÂ≠òÂú®Ôºâ */
async function createTemplateFileIfNotExists() {
    if (!tools_1.WORKSPACE_PATH) {
        tools_1.log.warn('Â∑•‰ΩúÂå∫Ë∑ØÂæÑÊú™ÊâæÂà∞ÔºåÊó†Ê≥ïÂàõÂª∫Ê®°ÊùøÊñá‰ª∂');
        return;
    }
    const vscodeDir = path_1.default.join(tools_1.WORKSPACE_PATH, '.vscode');
    const templatePath = path_1.default.join(vscodeDir, tools_1.TEMPLATE_FILE_NAME);
    // Ê£ÄÊü•Ê®°ÊùøÊñá‰ª∂ÊòØÂê¶Â∑≤Â≠òÂú®
    if (fs_1.default.existsSync(templatePath)) {
        tools_1.log.info('Ê®°ÊùøÊñá‰ª∂Â∑≤Â≠òÂú®ÔºåË∑≥ËøáÂàõÂª∫');
        return;
    }
    try {
        // Á°Æ‰øù.vscodeÁõÆÂΩïÂ≠òÂú®
        if (!fs_1.default.existsSync(vscodeDir)) {
            fs_1.default.mkdirSync(vscodeDir, { recursive: true });
            tools_1.log.info('Â∑≤ÂàõÂª∫ .vscode ÁõÆÂΩï');
        }
        // ËØªÂèñÈªòËÆ§Ê®°ÊùøÂÜÖÂÆπ
        const defaultTemplateContent = fs_1.default.readFileSync(tools_1.DEFAULT_TEMPLATE_FILE_PATH, 'utf8');
        // ÂàõÂª∫Â¢ûÂº∫ÁöÑÊ®°ÊùøÂÜÖÂÆπ
        const enhancedTemplateContent = `/**
 * Swagger Doc To Code Ê®°ÊùøÈÖçÁΩÆÊñá‰ª∂
 * Ê≠§Êñá‰ª∂Áî®‰∫éËá™ÂÆö‰πâÁîüÊàêÁöÑ TypeScript Êé•Âè£‰ª£Á†ÅÊ†ºÂºè
 * Êõ¥Â§öÈ´òÁ∫ßÁî®Ê≥ïËØ∑ÂèÇËÄÉ: https://github.com/xiaoniuge36/swagger-doc-to-code
 */

/**
 * Ëá™ÂÆö‰πâÂëΩÂêçÁ©∫Èó¥ÂêçÁß∞
 * @param {Object} params - Êé•Âè£ÂèÇÊï∞
 * @param {string} params.groupName - ÂàÜÁªÑÂêçÁß∞
 * @param {string} params.pathName - Ë∑ØÂæÑÂêçÁß∞
 * @param {string} params.method - ËØ∑Ê±ÇÊñπÊ≥ï
 * @returns {string} ÂëΩÂêçÁ©∫Èó¥ÂêçÁß∞
 */
function namespace(params) {
  const { groupName, pathName, method } = params
  return \`\$\{groupName.replace(/[\\-\\n\\s\/\\\\]/g, '_')\}_\$\{pathName\}_\$\{method\}\`
}

/**
 * Ëá™ÂÆö‰πâÂèÇÊï∞Êé•Âè£
 * @param {Object} params - Êé•Âè£‰∏ä‰∏ãÊñá
 * @returns {string} ÂèÇÊï∞Êé•Âè£‰ª£Á†Å
 */
function params(params) {
  return \`export interface Params {
\$\{params.properties.map(prop => \`  \$\{prop.name\}\$\{prop.required ? '' : '?'\}: \$\{prop.type\}\`).join('\\n')\}
\}\`
}

/**
 * Ëá™ÂÆö‰πâÂìçÂ∫îÊé•Âè£
 * @param {Object} params - Êé•Âè£‰∏ä‰∏ãÊñá
 * @returns {string} ÂìçÂ∫îÊé•Âè£‰ª£Á†Å
 */
function response(params) {
  return \`export interface Response {
\$\{params.properties.map(prop => \`  \$\{prop.name\}\$\{prop.required ? '' : '?'\}: \$\{prop.type\}\`).join('\\n')\}
\}\`
}

/**
 * Â§çÂà∂ËØ∑Ê±ÇÂáΩÊï∞Ê®°Êùø
 * ‰ºòÂåñÁâàÊú¨ÔºöÁîüÊàêÂçï‰∏™ËØ∑Ê±ÇÂáΩÊï∞ÔºåÂåÖÂê´ÂÆåÊï¥Ê≥®ÈáäÂíåÁ±ªÂûãÂÆö‰πâ
 * @param {Object} fileInfo - Êñá‰ª∂‰ø°ÊÅØ
 * @param {string} fileInfo.name - Êé•Âè£ÂêçÁß∞
 * @param {string} fileInfo.namespace - ÂëΩÂêçÁ©∫Èó¥
 * @param {string} fileInfo.path - ËØ∑Ê±ÇË∑ØÂæÑ
 * @param {string} fileInfo.method - ËØ∑Ê±ÇÊñπÊ≥ï
 * @returns {string[]} ËØ∑Ê±ÇÂáΩÊï∞‰ª£Á†ÅË°åÊï∞ÁªÑ
 */
function copyRequest(fileInfo) {
  // ÁîüÊàêÂáΩÊï∞ÂêçÔºàËΩ¨Êç¢‰∏∫È©ºÂ≥∞ÂëΩÂêçÔºâ
  const functionName = fileInfo.namespace
    .replace(/[^a-zA-Z0-9]/g, '_')
    .toLowerCase()
    .replace(/_([a-z])/g, (_, letter) => letter.toUpperCase())
  
  return [
    \`/**\`,
    \` * \$\{fileInfo.name || 'Êé•Âè£ËØ∑Ê±ÇÂáΩÊï∞'\}\`,
    \` * @description \$\{fileInfo.summary || fileInfo.name || ''\}\`,
    \` * @method \$\{fileInfo.method?.toUpperCase()\}\`,
    \` * @url \$\{fileInfo.path\}\`,
    \` * @param {\$\{fileInfo.namespace\}.Params} params - ËØ∑Ê±ÇÂèÇÊï∞\`,
    \` * @param {RequestOptions} options - ËØ∑Ê±ÇÈÖçÁΩÆÈÄâÈ°π\`,
    \` * @returns {Promise<\$\{fileInfo.namespace\}.Response>} ÂìçÂ∫îÊï∞ÊçÆ\`,
    \` */\`,
    \`export async function \$\{functionName\}(params?: \$\{fileInfo.namespace\}.Params, options?: RequestOptions): Promise<\$\{fileInfo.namespace\}.Response> {\`,
    \`  return request<\$\{fileInfo.namespace\}.Response>({\`,
    \`    url: '\$\{fileInfo.path\}',\`,
    \`    method: '\$\{fileInfo.method?.toUpperCase()\}',\`,
    \`    \$\{fileInfo.method?.toLowerCase() === 'get' ? 'params' : 'data'\}: params,\`,
    \`    ...options\`,
    \`  })\`,
    \`}\`,
    \`\`,
    \`// ‰ΩøÁî®Á§∫‰æãÔºö\`,
    \`// const result = await \$\{functionName\}({ /* ÂèÇÊï∞ */ })\`,
    \`// console.log(result)\`,
  ]
}

// ÂØºÂá∫ÈÖçÁΩÆ
module.exports = {
  
  // ËØ∑Ê±ÇÂáΩÊï∞Ê®°ÊùøÈÖçÁΩÆÔºà‰ºòÂåñÁâàÊú¨Ôºâ
  copyRequest,
  
  // ÂÖ∂‰ªñÂèØÈÄâÈÖçÁΩÆÁ§∫‰æãÔºàÂ∑≤Ê≥®ÈáäÔºåÊ†πÊçÆÈúÄË¶ÅÂêØÁî®Ôºâ
  /*
  // ÂëΩÂêçÁ©∫Èó¥ÈÖçÁΩÆ
  namespace,
  
  // ÂèÇÊï∞Êé•Âè£ÈÖçÁΩÆ
  params,
  
  // ÂìçÂ∫îÊé•Âè£ÈÖçÁΩÆ  
  response,
  // Ëá™ÂÆö‰πâÊñá‰ª∂ÂêçÁîüÊàêËßÑÂàô
  fileName: (params) => {
    return \`\$\{params.groupName\}-\$\{params.pathName\}\`
  },
  
  // Ëá™ÂÆö‰πâ‰øùÂ≠òË∑ØÂæÑ
  savePath: (params) => {
    return \`./src/api/\$\{params.groupName\}\`
  },
  
  // Ëá™ÂÆö‰πâÊñá‰ª∂Êâ©Â±ïÂêç
  ext: '.ts',
  
  // ÊòØÂê¶ÂøΩÁï•Êüê‰∫õÊé•Âè£
  ignore: (params) => {
    return params.path.includes('/internal/')
  }
  */
\}`;
        // ÂÜôÂÖ•Ê®°ÊùøÊñá‰ª∂
        fs_1.default.writeFileSync(templatePath, enhancedTemplateContent, 'utf8');
        tools_1.log.info('‚úÖ Ê®°ÊùøÊñá‰ª∂Â∑≤Ëá™Âä®ÁîüÊàê', true);
        vscode_1.default.window.showInformationMessage(`üéâ Êé•Âè£Ê®°ÊùøÂ∑≤ÁîüÊàêÔºÅ\n\nÊñá‰ª∂‰ΩçÁΩÆ: .vscode/${tools_1.TEMPLATE_FILE_NAME}\n\nÊÇ®ÂèØ‰ª•ÁºñËæëÊ≠§Êñá‰ª∂Êù•Ëá™ÂÆö‰πâÁîüÊàêÁöÑÊé•Âè£‰ª£Á†ÅÊ†ºÂºè„ÄÇ`, 'ÊâìÂºÄÊ®°ÊùøÊñá‰ª∂').then((selection) => {
            if (selection === 'ÊâìÂºÄÊ®°ÊùøÊñá‰ª∂') {
                vscode_1.default.workspace.openTextDocument(templatePath).then((doc) => {
                    vscode_1.default.window.showTextDocument(doc);
                });
            }
        });
    }
    catch (error) {
        tools_1.log.error(`ÂàõÂª∫Ê®°ÊùøÊñá‰ª∂Â§±Ë¥•: ${error}`, true);
    }
}
function registerListCommands({ viewList, viewLocal, listTreeView, localTreeView, }) {
    const commands = {
        /** Âà∑Êñ∞ API ÂàóË°® */
        refresh: () => {
            viewList.refresh();
        },
        /** ÈÄâÊã©Êé•Âè£ */
        onSelect: (e) => {
            const savePath = e.savePath || tools_1.config.extConfig.savePath || '';
            const filePath = path_1.default.join(tools_1.WORKSPACE_PATH || '', savePath, `${e.pathName}.d.ts`);
            (0, tools_1.preSaveDocument)((0, core_1.renderToInterface)(e), filePath, true);
        },
        /** Ê∑ªÂä† swagger È°πÁõÆ */
        async add() {
            const titleText = tools_1.localize.getLocalize('text.title');
            const urlText = tools_1.localize.getLocalize('text.swaggerJsonUrl');
            const savePathText = tools_1.localize.getLocalize('text.config.savePath');
            const url = await vscode_1.default.window.showInputBox({
                ignoreFocusOut: true,
                title: tools_1.localize.getLocalize('temp.input.placeholder', urlText),
                placeHolder: 'http://',
            });
            if (!url) {
                vscode_1.default.window.showErrorMessage(tools_1.localize.getLocalize('temp.input.none', urlText));
                return;
            }
            tools_1.config.extConfig.swaggerJsonUrl.forEach((v) => {
                if (v.url === url) {
                    tools_1.log.error(tools_1.localize.getLocalize('text.exist', urlText), true);
                    throw new Error();
                }
            });
            const title = await vscode_1.default.window.showInputBox({
                ignoreFocusOut: true,
                title: tools_1.localize.getLocalize('temp.input.placeholder', titleText),
            });
            if (!title) {
                vscode_1.default.window.showErrorMessage(tools_1.localize.getLocalize('temp.input.none', titleText));
                return;
            }
            const savePath = await vscode_1.default.window.showInputBox({
                ignoreFocusOut: true,
                title: tools_1.localize.getLocalize('temp.input.placeholder', savePathText),
                placeHolder: `${tools_1.config.extConfig.savePath} (${tools_1.localize.getLocalize('text.canBeEmpty')})`,
            });
            const swaggerJsonUrl = Object.assign([], tools_1.config.extConfig.swaggerJsonUrl || []);
            swaggerJsonUrl.push((0, tools_1.deleteEmptyProperty)({ title, url, savePath }));
            tools_1.config.setCodeConfig({ swaggerJsonUrl });
            tools_1.log.info(`<cmd.list.add> Add Swagger Project: [${title}]`);
            // Ëá™Âä®ÂàõÂª∫Ê®°ÊùøÊñá‰ª∂
            await createTemplateFileIfNotExists();
            setTimeout(() => {
                viewList.refresh();
            }, 200);
        },
        /** ÊêúÁ¥¢Êé•Âè£ÂàóË°® (ËøúÁ®ã) */
        search() {
            (0, core_1.openListPicker)({
                title: `${tools_1.EXT_NAME} - ${tools_1.localize.getLocalize('command.search')} (UPDATE:${viewList.updateDate})`,
                placeholder: tools_1.localize.getLocalize('text.search.placeholder'),
                before: () => viewList.getSearchList(),
            }).then((res) => {
                if (!res.source)
                    return tools_1.log.error('Picker.res.source is undefined', true);
                if (!res.configItem)
                    return tools_1.log.error('Picker.res.configItem is undefined', true);
                let hasLocalFile = false;
                for (let i = 0; i < viewLocal.allSavePath.length; i++) {
                    const localPath = viewLocal.allSavePath[i];
                    const filePath = path_1.default.join(localPath, `${res.source.pathName}.d.ts`);
                    if (fs_1.default.existsSync(filePath)) {
                        const fileInfo = viewLocal.readLocalFile(filePath);
                        if (fileInfo) {
                            hasLocalFile = true;
                            localTreeView.reveal(viewLocal.renderItem(fileInfo), { expand: true, select: true });
                        }
                    }
                }
                if (hasLocalFile)
                    return; // Â∑≤ÊúâÊú¨Âú∞Êñá‰ª∂
                const listItem = viewList.transformToListItem(res.source, res.configItem);
                listTreeView.reveal(listItem, { expand: true, select: true }).then(() => {
                    setTimeout(() => {
                        commands.onSelect(res.source);
                    }, 100);
                });
            });
        },
        /** ‰øùÂ≠òÊé•Âè£Ëá≥Êú¨Âú∞ (Âçï‰∏™/ÊâπÈáè) */
        async saveInterface(item) {
            console.log('cmd.list.saveInterface', item);
            switch (item.options.type) {
                case 'group':
                    // ÊâπÈáè‰øùÂ≠òÂºÄÂßãÊèêÁ§∫
                    tools_1.log.info(`${tools_1.localize.getLocalize('command.saveInterface')}(${tools_1.localize.getLocalize('text.group')}) <${item.label}> ÂºÄÂßãÊâπÈáè‰øùÂ≠ò...`, true);
                    viewList
                        .saveInterfaceGroup(item)
                        .then(() => {
                        tools_1.log.info(`${tools_1.localize.getLocalize('command.saveInterface')}(${tools_1.localize.getLocalize('text.group')}) <${item.label}> ${tools_1.localize.getLocalize('success')}`, true);
                        viewLocal.refresh();
                    })
                        .catch((err) => {
                        tools_1.log.error(`${tools_1.localize.getLocalize('command.saveInterface')}(${tools_1.localize.getLocalize('text.group')}) <${item.label}> ${tools_1.localize.getLocalize('failed')} ${err}`, true);
                    });
                    break;
                case 'interface':
                    let interfaceItem;
                    try {
                        // @ts-ignore
                        interfaceItem = item.command?.arguments[0];
                    }
                    catch (error) {
                        tools_1.log.error(error, true);
                    }
                    if (!interfaceItem) {
                        return tools_1.log.error('interfaceItem is undefined.', true);
                    }
                    viewList
                        .saveInterface(interfaceItem)
                        .then(() => {
                        tools_1.log.info(`${tools_1.localize.getLocalize('command.saveInterface')} <${item.label}> ${tools_1.localize.getLocalize('success')}`, true);
                        viewLocal.refresh();
                        // ÊèêÁ§∫Áî®Êà∑Ê†πÊçÆÈúÄÊ±Ç‰øÆÊîπÊé•Âè£ÊñáÊ°£
                        vscode_1.default.window.showInformationMessage(`üéâ Êé•Âè£ "${item.label}" ÂØºÂÖ•ÊàêÂäüÔºÅ\n\nüí° ÊèêÁ§∫ÔºöÊÇ®ÂèØ‰ª•Ê†πÊçÆÈ°πÁõÆÈúÄÊ±Ç‰øÆÊîπÁîüÊàêÁöÑÊé•Âè£ÊñáÊ°£ÔºåÂåÖÊã¨Ôºö\n‚Ä¢ Ë∞ÉÊï¥ÂèÇÊï∞Á±ªÂûãÂíåÂëΩÂêç\n‚Ä¢ Ê∑ªÂä†‰∏öÂä°ÈÄªËæëÊ≥®Èáä\n‚Ä¢ ‰øÆÊîπËØ∑Ê±ÇÂáΩÊï∞Ê®°Êùø\n‚Ä¢ Ëá™ÂÆö‰πâÂìçÂ∫îÊï∞ÊçÆÁªìÊûÑ`, 'Êü•ÁúãÊé•Âè£Êñá‰ª∂', 'ÁºñËæëÊ®°ÊùøÈÖçÁΩÆ').then((selection) => {
                            if (selection === 'Êü•ÁúãÊé•Âè£Êñá‰ª∂') {
                                // ÊâìÂºÄÁîüÊàêÁöÑÊé•Âè£Êñá‰ª∂
                                const savePath = interfaceItem?.savePath || tools_1.config.extConfig.savePath || '';
                                const filePath = path_1.default.join(tools_1.WORKSPACE_PATH || '', savePath, `${interfaceItem?.pathName}.d.ts`);
                                if (fs_1.default.existsSync(filePath)) {
                                    vscode_1.default.workspace.openTextDocument(filePath).then((doc) => {
                                        vscode_1.default.window.showTextDocument(doc);
                                    });
                                }
                            }
                            else if (selection === 'ÁºñËæëÊ®°ÊùøÈÖçÁΩÆ') {
                                // ÊâìÂºÄÊ®°ÊùøÈÖçÁΩÆÊñá‰ª∂
                                const templatePath = path_1.default.join(tools_1.WORKSPACE_PATH || '', '.vscode', tools_1.TEMPLATE_FILE_NAME);
                                if (fs_1.default.existsSync(templatePath)) {
                                    vscode_1.default.workspace.openTextDocument(templatePath).then((doc) => {
                                        vscode_1.default.window.showTextDocument(doc);
                                    });
                                }
                                else {
                                    vscode_1.default.window.showWarningMessage('Ê®°ÊùøÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåËØ∑ÂÖàÊ∑ªÂä†‰∏Ä‰∏™Êé•Âè£È°πÁõÆ‰ª•Ëá™Âä®ÁîüÊàêÊ®°ÊùøÊñá‰ª∂„ÄÇ');
                                }
                            }
                        });
                    })
                        .catch((err) => {
                        tools_1.log.error(`${tools_1.localize.getLocalize('command.saveInterface')} <${item.label}> ${tools_1.localize.getLocalize('failed')} ${err}`, true);
                    });
                    break;
                default:
                    tools_1.log.warn(tools_1.localize.getLocalize('error.action'), true);
                    tools_1.log.warn(JSON.stringify(item));
                    break;
            }
        },
        /** ‰øùÂ≠òÊñáÊ°£ */
        saveInterfaceWitchDoc(doc) {
            const docText = doc.getText();
            (0, tools_1.saveDocument)(docText, doc.fileName).then(() => {
                viewLocal.refresh();
                (0, tools_1.preSaveDocument)(docText, doc.fileName); // Êõ¥Êñ∞ÊòæÁ§∫Áä∂ÊÄÅ
            });
        },
    };
    for (const command in commands) {
        vscode_1.default.commands.registerCommand(`cmd.list.${command}`, commands[command]);
    }
}
exports.registerListCommands = registerListCommands;
//# sourceMappingURL=list.cmd.js.map