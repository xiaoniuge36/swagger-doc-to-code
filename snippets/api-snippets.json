{
  "API GET Request": {
    "prefix": "api-get",
    "body": [
      "// GET ${1:API_NAME}",
      "export interface ${2:GetRequest} {",
      "  ${3:// 请求参数}",
      "}",
      "",
      "export interface ${4:GetResponse} {",
      "  ${5:// 响应数据}",
      "}",
      "",
      "export const ${6:getApiData} = async (params: ${2:GetRequest}): Promise<${4:GetResponse}> => {",
      "  const response = await fetch('${7:/api/endpoint}', {",
      "    method: 'GET',",
      "    headers: {",
      "      'Content-Type': 'application/json',",
      "    },",
      "  });",
      "  return response.json();",
      "};"
    ],
    "description": "生成 GET API 请求的完整代码模板"
  },
  "API POST Request": {
    "prefix": "api-post",
    "body": [
      "// POST ${1:API_NAME}",
      "export interface ${2:PostRequest} {",
      "  ${3:// 请求参数}",
      "}",
      "",
      "export interface ${4:PostResponse} {",
      "  ${5:// 响应数据}",
      "}",
      "",
      "export const ${6:postApiData} = async (data: ${2:PostRequest}): Promise<${4:PostResponse}> => {",
      "  const response = await fetch('${7:/api/endpoint}', {",
      "    method: 'POST',",
      "    headers: {",
      "      'Content-Type': 'application/json',",
      "    },",
      "    body: JSON.stringify(data),",
      "  });",
      "  return response.json();",
      "};"
    ],
    "description": "生成 POST API 请求的完整代码模板"
  },
  "API Interface Definition": {
    "prefix": "api-interface",
    "body": [
      "/**",
      " * ${1:API接口描述}",
      " */",
      "export interface ${2:ApiInterface} {",
      "  /** ${3:字段描述} */",
      "  ${4:fieldName}: ${5:string};",
      "  $0",
      "}"
    ],
    "description": "生成 API 接口类型定义"
  },
  "Axios GET Request": {
    "prefix": "axios-get",
    "body": [
      "import axios from 'axios';",
      "",
      "// GET ${1:API_NAME}",
      "export interface ${2:GetParams} {",
      "  ${3:// 请求参数}",
      "}",
      "",
      "export interface ${4:GetResponse} {",
      "  ${5:// 响应数据}",
      "}",
      "",
      "export const ${6:getApiData} = async (params: ${2:GetParams}): Promise<${4:GetResponse}> => {",
      "  const { data } = await axios.get<${4:GetResponse}>('${7:/api/endpoint}', {",
      "    params,",
      "  });",
      "  return data;",
      "};"
    ],
    "description": "生成基于 Axios 的 GET 请求代码模板"
  },
  "Axios POST Request": {
    "prefix": "axios-post",
    "body": [
      "import axios from 'axios';",
      "",
      "// POST ${1:API_NAME}",
      "export interface ${2:PostData} {",
      "  ${3:// 请求数据}",
      "}",
      "",
      "export interface ${4:PostResponse} {",
      "  ${5:// 响应数据}",
      "}",
      "",
      "export const ${6:postApiData} = async (data: ${2:PostData}): Promise<${4:PostResponse}> => {",
      "  const response = await axios.post<${4:PostResponse}>('${7:/api/endpoint}', data);",
      "  return response.data;",
      "};"
    ],
    "description": "生成基于 Axios 的 POST 请求代码模板"
  },
  "API Error Handler": {
    "prefix": "api-error",
    "body": [
      "export interface ApiError {",
      "  code: string;",
      "  message: string;",
      "  details?: any;",
      "}",
      "",
      "export const handleApiError = (error: any): ApiError => {",
      "  if (error.response) {",
      "    // 服务器响应错误",
      "    return {",
      "      code: error.response.status.toString(),",
      "      message: error.response.data?.message || '服务器错误',",
      "      details: error.response.data,",
      "    };",
      "  } else if (error.request) {",
      "    // 网络错误",
      "    return {",
      "      code: 'NETWORK_ERROR',",
      "      message: '网络连接失败',",
      "      details: error.request,",
      "    };",
      "  } else {",
      "    // 其他错误",
      "    return {",
      "      code: 'UNKNOWN_ERROR',",
      "      message: error.message || '未知错误',",
      "      details: error,",
      "    };",
      "  }",
      "};"
    ],
    "description": "生成 API 错误处理代码模板"
  },
  "SWR Hook": {
    "prefix": "swr-hook",
    "body": [
      "import useSWR from 'swr';",
      "",
      "// SWR Hook for ${1:API_NAME}",
      "export interface ${2:ApiData} {",
      "  ${3:// 数据结构}",
      "}",
      "",
      "const fetcher = async (url: string): Promise<${2:ApiData}> => {",
      "  const response = await fetch(url);",
      "  if (!response.ok) {",
      "    throw new Error('Failed to fetch data');",
      "  }",
      "  return response.json();",
      "};",
      "",
      "export const use${4:ApiName} = (${5:params}?: any) => {",
      "  const { data, error, mutate } = useSWR<${2:ApiData}>(",
      "    ${5:params} ? \`${6:/api/endpoint}/\${${5:params}}\` : null,",
      "    fetcher",
      "  );",
      "",
      "  return {",
      "    data,",
      "    isLoading: !error && !data,",
      "    isError: error,",
      "    mutate,",
      "  };",
      "};"
    ],
    "description": "生成基于 SWR 的数据获取 Hook"
  }
}